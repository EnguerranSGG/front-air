---
import PresentationCard from './PresentationCard.astro';

let counselors = [];

try {
  const res = await fetch(import.meta.env.PUBLIC_API_URL + '/counselors/all');
  const data = await res.json();
  counselors = Array.isArray(data) ? data : [];
} catch (err) {
  console.error('Erreur lors du fetch API :', err);
}
---

<section class="counselors-section animate-fade-in">
  <h2>Notre conseil d'administration</h2>
  
  <div class="counselors-grid">
    {counselors.map((counselor, index) => (
      <div class="counselor-card animate-slide-up" key={counselor.counselor_id} style={`animation-delay: ${0.3 + index * 0.2}s`}>
        <div class="counselor-avatar">
          <div class="avatar-placeholder">
            <span>{counselor.counselor_firstname.charAt(0)}{counselor.counselor_lastname.charAt(0)}</span>
          </div>
        </div>
        <div class="counselor-info">
          <h3 class="counselor-name">{counselor.counselor_firstname} {counselor.counselor_lastname}</h3>
          <p class="counselor-function">{counselor.counselor_function}</p>
        </div>
      </div>
    ))}
  </div>
</section>

<style>
  /* === STYLES MODERNES POUR LA SECTION CONSEILLERS === */
  
  .counselors-section {
    padding: 3rem 2rem;
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    border-radius: 20px;
    margin: 2rem auto;
    max-width: 1200px;
    box-shadow: 0 4px 20px rgba(0, 70, 164, 0.1);
  }

  .counselors-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }

  .counselor-card {
    background: white;
    border-radius: 15px;
    padding: 2rem;
    box-shadow: 0 6px 25px rgba(0, 70, 164, 0.15);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    opacity: 0;
    transform: translateY(30px);
  }

  .counselor-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #0046a4, #1a73e8);
    transform: translateX(-100%);
    transition: transform 0.6s ease;
  }

  .counselor-card:hover::before {
    transform: translateX(0);
  }

  .counselor-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 35px rgba(0, 70, 164, 0.25);
  }

  .counselor-avatar {
    display: flex;
    justify-content: center;
    margin-bottom: 1.5rem;
  }

  .avatar-placeholder {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background: linear-gradient(135deg, #0046a4, #1a73e8);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5rem;
    font-weight: 700;
    box-shadow: 0 4px 15px rgba(0, 70, 164, 0.3);
    transition: all 0.3s ease;
  }

  .counselor-card:hover .avatar-placeholder {
    transform: scale(1.1);
    box-shadow: 0 6px 20px rgba(0, 70, 164, 0.4);
  }

  .counselor-info {
    text-align: center;
  }

  .counselor-name {
    color: #4b2aa5;
    font-size: 1.4rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    transition: color 0.3s ease;
  }

  .counselor-card:hover .counselor-name {
    color: #1a73e8;
  }

  .counselor-function {
    color: #0046a4;
    font-size: 1rem;
    font-weight: 600;
    margin: 0 0 1rem 0;
    padding: 0.5rem 1rem;
    background: rgba(0, 70, 164, 0.1);
    border-radius: 20px;
    display: inline-block;
    transition: all 0.3s ease;
  }

  .counselor-card:hover .counselor-function {
    background: rgba(0, 70, 164, 0.15);
    transform: scale(1.05);
  }

  .counselor-presentation {
    color: #64748b;
    font-size: 0.95rem;
    line-height: 1.6;
    margin: 0;
    font-weight: 500;
  }

  /* === ANIMATIONS === */
  .animate-fade-in {
    opacity: 0;
    animation: fadeInSection 0.8s ease-out 0.3s forwards;
  }

  .animate-slide-up {
    animation: slideUpFade 0.6s ease-out forwards;
  }

  @keyframes fadeInSection {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  @keyframes slideUpFade {
    from { opacity: 0; transform: translateY(30px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* === RESPONSIVE === */
  @media (max-width: 768px) {
    .counselors-section {
      padding: 2rem 1rem;
      margin: 1rem;
      border-radius: 15px;
    }

    .counselors-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .counselor-card {
      padding: 1.5rem;
    }

    .avatar-placeholder {
      width: 70px;
      height: 70px;
      font-size: 1.3rem;
    }

    .counselor-name {
      font-size: 1.3rem;
    }

    .counselor-function {
      font-size: 0.9rem;
    }

    .counselor-presentation {
      font-size: 0.9rem;
    }

    /* Animations plus rapides sur mobile */
    .animate-slide-up {
      animation-duration: 0.4s;
    }
  }

  @media (max-width: 480px) {
    .counselors-grid {
      gap: 1rem;
    }

    .counselor-card {
      padding: 1.2rem;
    }

    .avatar-placeholder {
      width: 60px;
      height: 60px;
      font-size: 1.1rem;
    }
  }

  /* === ACCESSIBILITÉ === */
  @media (prefers-reduced-motion: reduce) {
    .animate-fade-in,
    .animate-slide-up {
      animation: none;
      opacity: 1;
      transform: none;
    }
    
    .counselor-card:hover {
      transform: none;
    }
    
    .counselor-card:hover .avatar-placeholder {
      transform: none;
    }
    
    .counselor-card:hover .counselor-function {
      transform: none;
    }
  }
</style>

<script>
  // Animation au scroll avec Intersection Observer
  function initCounselorAnimations() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const cards = entry.target.querySelectorAll('.counselor-card');
          cards.forEach((card, index) => {
            setTimeout(() => {
              card.classList.add('animate-slide-up');
            }, index * 200);
          });
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    const counselorsSection = document.querySelector('.counselors-section');
    if (counselorsSection) {
      observer.observe(counselorsSection);
    }
  }

  // Initialiser les animations quand le DOM est chargé
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCounselorAnimations);
  } else {
    initCounselorAnimations();
  }

  // Réinitialiser les animations si nécessaire
  document.addEventListener('astro:page-load', initCounselorAnimations);
</script>