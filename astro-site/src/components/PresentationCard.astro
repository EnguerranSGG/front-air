---
interface Props {
  id: string;
}

const { id } = Astro.props;

const API_BASE_URL = import.meta.env.PUBLIC_API_URL;
const API_ENDPOINT = `${API_BASE_URL}/presentations/${id}`;

let presentation: any = null;
let error: string | null = null;

try {
  const response = await fetch(API_ENDPOINT);
  
  if (response.ok) {
    presentation = await response.json();
  } else {
    error = `Erreur ${response.status}: ${response.statusText}`;
  }
} catch (err) {
  error = `Erreur de connexion: ${err instanceof Error ? err.message : 'Erreur inconnue'}`;
}
---

<div class="presentation-card" data-animate="true">
  {error ? (
    <div class="presentation-error">
      <svg class="icon error-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
        <line x1="15" y1="9" x2="9" y2="15" stroke="currentColor" stroke-width="2"/>
        <line x1="9" y1="9" x2="15" y2="15" stroke="currentColor" stroke-width="2"/>
      </svg>
      <p>Impossible de charger la présentation: {error}</p>
    </div>
  ) : presentation ? (
    <div class="presentation-content">
      <div class="presentation-text" set:html={presentation.presentation_text ? 
        presentation.presentation_text.split('\n').map((paragraph: string, index: number) => 
          paragraph.trim() ? `<p>${paragraph.trim()}</p>` : ''
        ).join('')
      : 'Aucun contenu disponible'}></div>
    </div>
  ) : (
    <div class="presentation-loading">
      <svg class="icon loading-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" stroke-dasharray="31.416" stroke-dashoffset="31.416">
          <animate attributeName="stroke-dasharray" dur="2s" values="0 31.416;15.708 15.708;0 31.416" repeatCount="indefinite"/>
          <animate attributeName="stroke-dashoffset" dur="2s" values="0;-15.708;-31.416" repeatCount="indefinite"/>
        </circle>
      </svg>
      <p>Chargement de la présentation...</p>
    </div>
  )}
</div>

<style>
  .presentation-card {
    width: 100%;
    margin: 0;
  }

  .presentation-content {
    padding: 2rem;
    text-align: center;
    max-width: 1200px;
    margin: 0 auto;
  }

  .presentation-text {
    font-size: 1.1rem;
    line-height: 1.6;
    color: #333;
    margin: 0;
    text-align: center;
    max-width: 100%;
  }

  .presentation-text p {
    margin: 0 0 1rem 0;
  }

  .presentation-text p:last-child {
    margin-bottom: 0;
  }

  /* Version mobile */
  @media (max-width: 768px) {
    .presentation-content {
      padding: 1.5rem;
    }
    
    .presentation-text {
      font-size: 1rem;
    }
  }

  .presentation-error,
  .presentation-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    text-align: center;
    color: #666;
  }

  .presentation-error {
    color: #dc3545;
  }

  .icon {
    width: 1.2rem;
    height: 1.2rem;
  }

  .loading-icon {
    width: 2rem;
    height: 2rem;
    margin-bottom: 1rem;
  }

  .error-icon {
    width: 2rem;
    height: 2rem;
    margin-bottom: 1rem;
    color: #dc3545;
  }
</style>
