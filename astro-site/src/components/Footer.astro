---
// Récupération des informations du siège social (structure ID 1)
let siegeSocial = null;

try {
  const res = await fetch(import.meta.env.PUBLIC_API_URL + '/structures/all');
  const data = await res.json();
  console.log('Structures récupérées pour footer :', data);
  
  if (Array.isArray(data)) {
    // Filtrer la structure avec l'ID 1 (siège social)
    siegeSocial = data.find(structure => structure.structure_id === 1);
    console.log('Siège social trouvé :', siegeSocial);
  }
} catch (err) {
  console.error('Erreur lors du fetch des structures pour footer :', err);
}

// Date de build comme fallback
const buildDate = new Date().toLocaleDateString('fr-FR');
---

<footer class="footer">
  <div class="footer-content">
    <div class="footer-section">
      {siegeSocial ? (
        <div class="siege-info">
          <h4 class="siege-title">Siège social</h4>
          {siegeSocial.address && (
            <p class="siege-address">
              {siegeSocial.address}
            </p>
          )}
          {siegeSocial.phone_number && (
            <p class="siege-phone">
              {siegeSocial.phone_number}
            </p>
          )}
        </div>
      ) : (
        <div class="siege-info">
          <h4 class="siege-title">Siège social</h4>
          <p class="no-data">Informations non disponibles</p>
        </div>
      )}
    </div>
    
    <div class="footer-section">
      <div class="legal-links">
        <a href="/mentions-legales" class="legal-link">Mentions légales</a>
        <a href="/politique-confidentialite" class="legal-link">Politique de confidentialité</a>
      </div>
    </div>
  </div>
  
  <div class="footer-bottom">
    <p class="last-update" id="last-update">
      Dernière mise à jour du site : {buildDate}
    </p>
  </div>
</footer>

<script>
  // Fonction pour mettre à jour la date de dernière modification
  async function updateLastUpdateDate() {
    const lastUpdateElement = document.getElementById('last-update');
    if (!lastUpdateElement) return;

    console.log('Début de updateLastUpdateDate');
    console.log('Date de build (fallback):', '{buildDate}');

    try {
      // Utiliser localhost pour les requêtes côté client (navigateur)
      const baseUrl = window.location.hostname === 'localhost' ? 'http://localhost:3000/api' : import.meta.env.PUBLIC_API_URL;
      const apiUrl = baseUrl + '/last-update';
      console.log('Appel API:', apiUrl);
      console.log('Base URL utilisée:', baseUrl);
      
      console.log('Début du fetch...');
      const response = await fetch(apiUrl, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
        },
        mode: 'cors'
      });
      console.log('Fetch terminé, status:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('Données API reçues:', data);
        
        if (data.lastUpdate) {
          // Formater la date reçue de l'API
          const lastUpdateDate = new Date(data.lastUpdate).toLocaleDateString('fr-FR');
          console.log('Date formatée depuis API:', lastUpdateDate);
          lastUpdateElement.textContent = `Dernière mise à jour du site : ${lastUpdateDate}`;
          console.log('Date mise à jour dans le DOM');
        }
      } else {
        console.warn('Erreur lors de la récupération de la date de dernière modification:', response.status);
        // Garder la date de build par défaut
      }
    } catch (error) {
      console.error('Erreur lors du fetch de la date de dernière modification:', error);
      // Garder la date de build par défaut en cas d'erreur
    }
  }

  // Appeler la fonction au chargement de la page
  console.log('Script footer chargé, appel de updateLastUpdateDate');
  updateLastUpdateDate();
</script>

<style>
  .footer {
    background: #2c3e50;
    color: #ecf0f1;
    padding: 2rem 0;
    margin-top: auto;
  }

  .footer-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 2rem;
  }

  .footer-section {
    flex: 1;
  }

  .siege-info {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    align-items: flex-start;
  }

  .siege-title {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
    color: #3498db;
    text-align: left;
  }

  .siege-address,
  .siege-phone {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0;
    color: #ecf0f1;
    font-size: 0.9rem;
  }

  .icon {
    width: 1rem;
    height: 1rem;
    flex-shrink: 0;
  }

  .no-data {
    color: #95a5a6;
    font-style: italic;
    margin: 0;
  }

  .legal-links {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .legal-link {
    color: #3498db;
    text-decoration: none;
    transition: color 0.3s ease;
    font-weight: 500;
  }

  .legal-link:hover {
    color: #5dade2;
  }

  .footer-bottom {
    border-top: 1px solid #34495e;
    margin-top: 2rem;
    padding-top: 1rem;
    text-align: center;
  }

  .last-update {
    color: #95a5a6;
    font-size: 0.85rem;
    margin: 0;
    font-style: italic;
  }

  /* Version mobile */
  @media (max-width: 768px) {
    .footer-content {
      flex-direction: column;
      gap: 1.5rem;
      text-align: center;
    }

    .footer-section {
      width: 100%;
    }

    .siege-address,
    .siege-phone {
      justify-content: center;
    }
  }
</style>
